loi=X$KATOIII_A6_seed
plot(as.Date(loi$date),loi$correctedCount)
loi=X$`NUGC-4_A4_seed`
plot(as.Date(loi$date),loi$correctedCount)
sapply(X, function(loi) try(plot(as.Date(loi$date),loi$correctedCount)))
plot(as.Date(loi$date),loi$correctedCount)
loi$correctedCount
loi$id
id= "NUGC-4_A4_seedTPd8"
try(cloneid::harvest(id, loi[id,"passaged_from_id1"],cellCount = NA))
sapply(X, function(loi) loi$areaOccupied_cm2/loi$correctedCount)
dev.off()
dev.off()
fileid='NUGC-4_A4_seedTPd8'
SEGDIR="~/CellSegmentations/output/DetectionResults"
eps=0.15; minPts=2; MAXSIZE=22^2; MINSIZE=8^2;    dm=read.csv(paste0(SEGDIR, filesep, fileid,".csv"),sep="\t",check.names = F)
dm=dm[,sapply(colnames(dm), function(x) is.numeric(dm[,x]))]
# sapply(colnames(dm),  function(x) try(hist(dm[,x],xlab=x)))
## Z-score
la=apply(dm, 2, function(x) (x - mean(x,na.rm=T))/sd(x,na.rm=T))
la=as.data.frame(la)
## UMAP
pdf(paste0(SEGDIR,filesep,"../Images/",fileid,"_overlay.pdf"))
a=umap::umap(la)
la$col=round(1+la[,'Cell: Area']-min(la[,'Cell: Area']))
## Unsupervissed clustering
cl=dbscan::dbscan(a$layout, eps = eps, minPts = minPts)
col=rainbow(max(cl$cluster)*1.2)
cl$cluster=cl$cluster+1
plot(a$layout,pch=20, col=col[cl$cluster])
dm$cluster=cl$cluster
boxplot(dm$`Cell: Area`~dm$cluster)
## cells to highlight
stats1=.grpstats(dm,dm$cluster,"quantile",0.9)$quantile
stats2=.grpstats(dm,dm$cluster,"quantile",0.1)$quantile
cte=stats1[stats1[,"Cell: Area"]>MAXSIZE ,"cluster"]
cte=c(cte, stats2[stats2[,"Cell: Area"]>MAXSIZE,"cluster"])
## Correct cell count
dm$filtered=dm$cluster %in% cte
Z = dm[!dm$filtered,]; ## Cells not filtered
A_z = sum(Z$`Cell: Area`);	## These Z unfiltered cells occupy an area A_z
A_e = sum(dm[dm$filtered,"Cell: Area"]); ##	Filtered cells occupy an area A_e
S=mean(Z$`Cell: Area`) ## calculate average size of unfiltered cells: S
correctedCount = A_e/S # estimate how many cells there are in A_e as A_e/S
correctedCount = correctedCount+nrow(Z) ##	Record total number of cells Z+A_e/S
areaOccupied = sum(dm$`Cell: Area`)
## Overlay on image segmentation
dm_=dm[dm$filtered,]; #Filtered cells
ia=raster::raster(paste0(SEGDIR,filesep,"../Images/",fileid,"_overlay.tif"))
ROI <- as(raster::extent(100, 1900, ia@extent@ymax - 1200, ia@extent@ymax - 100), 'SpatialPolygons')
ia_ <- raster::crop(ia, ROI)
raster::plot(ia_, ann=FALSE,axes=FALSE, useRaster=T,legend=F)
points(dm_$`Centroid X µm`,ia@extent@ymax - dm_$`Centroid Y µm`, col="black", pch=20, cex=0.63)
# replot umap
tmp=a$layout[rownames(la) %in% rownames(dm_),]
col=rainbow(max(la$col))
plot(a$layout,pch=20, col=col[la$col])
points(tmp)
legend("topright", as.character(1:length(col)),fill=col)
dev.off()
o=list(areaCount=nrow(dm), correctedCount=correctedCount, areaOccupied=areaOccupied, notFilteredCells=nrow(Z),filteredFrac=sum(dm$filtered)/nrow(dm),meanSize=S)
print(unlist(o))
return(list(stats=o,dm=dm))
}
eps=0.15; minPts=2; MAXSIZE=22^2; MINSIZE=8^2;    dm=read.csv(paste0(SEGDIR, filesep, fileid,".csv"),sep="\t",check.names = F)
dm=dm[,sapply(colnames(dm), function(x) is.numeric(dm[,x]))]
# sapply(colnames(dm),  function(x) try(hist(dm[,x],xlab=x)))
## Z-score
la=apply(dm, 2, function(x) (x - mean(x,na.rm=T))/sd(x,na.rm=T))
la=as.data.frame(la)
## UMAP
pdf(paste0(SEGDIR,filesep,"../Images/",fileid,"_overlay.pdf"))
a=umap::umap(la)
la$col=round(1+la[,'Cell: Area']-min(la[,'Cell: Area']))
## Unsupervissed clustering
cl=dbscan::dbscan(a$layout, eps = eps, minPts = minPts)
col=rainbow(max(cl$cluster)*1.2)
cl$cluster=cl$cluster+1
plot(a$layout,pch=20, col=col[cl$cluster])
dm$cluster=cl$cluster
boxplot(dm$`Cell: Area`~dm$cluster)
## cells to highlight
stats1=.grpstats(dm,dm$cluster,"quantile",0.9)$quantile
stats2=.grpstats(dm,dm$cluster,"quantile",0.1)$quantile
cte=stats1[stats1[,"Cell: Area"]>MAXSIZE ,"cluster"]
cte=c(cte, stats2[stats2[,"Cell: Area"]>MAXSIZE,"cluster"])
## Correct cell count
dm$filtered=dm$cluster %in% cte
Z = dm[!dm$filtered,]; ## Cells not filtered
A_z = sum(Z$`Cell: Area`);	## These Z unfiltered cells occupy an area A_z
A_e = sum(dm[dm$filtered,"Cell: Area"]); ##	Filtered cells occupy an area A_e
S=mean(Z$`Cell: Area`) ## calculate average size of unfiltered cells: S
correctedCount = A_e/S # estimate how many cells there are in A_e as A_e/S
correctedCount = correctedCount+nrow(Z) ##	Record total number of cells Z+A_e/S
areaOccupied = sum(dm$`Cell: Area`)
## Overlay on image segmentation
dm_=dm[dm$filtered,]; #Filtered cells
ia=raster::raster(paste0(SEGDIR,filesep,"../Images/",fileid,"_overlay.tif"))
ROI <- as(raster::extent(100, 1900, ia@extent@ymax - 1200, ia@extent@ymax - 100), 'SpatialPolygons')
ia_ <- raster::crop(ia, ROI)
raster::plot(ia_, ann=FALSE,axes=FALSE, useRaster=T,legend=F)
points(dm_$`Centroid X µm`,ia@extent@ymax - dm_$`Centroid Y µm`, col="black", pch=20, cex=0.63)
# replot umap
tmp=a$layout[rownames(la) %in% rownames(dm_),]
col=rainbow(max(la$col))
plot(a$layout,pch=20, col=col[la$col])
points(tmp)
legend("topright", as.character(1:length(col)),fill=col)
dev.off()
o=list(areaCount=nrow(dm), correctedCount=correctedCount, areaOccupied=areaOccupied, notFilteredCells=nrow(Z),filteredFrac=sum(dm$filtered)/nrow(dm),meanSize=S)
print(unlist(o))
return(list(stats=o,dm=dm))
eps=0.15; minPts=2; MAXSIZE=22^2; MINSIZE=8^2;    dm=read.csv(paste0(SEGDIR, filesep, fileid,".csv"),sep="\t",check.names = F)
dm=dm[,sapply(colnames(dm), function(x) is.numeric(dm[,x]))]
# sapply(colnames(dm),  function(x) try(hist(dm[,x],xlab=x)))
fileid='NUGC-4_A4_seedTPd8_10x_ph_tl'
eps=0.15; minPts=2; MAXSIZE=22^2; MINSIZE=8^2;    dm=read.csv(paste0(SEGDIR, filesep, fileid,".csv"),sep="\t",check.names = F)
dm=dm[,sapply(colnames(dm), function(x) is.numeric(dm[,x]))]
dim(dm)
head(dm)
# sapply(colnames(dm),  function(x) try(hist(dm[,x],xlab=x)))
## Z-score
la=apply(dm, 2, function(x) (x - mean(x,na.rm=T))/sd(x,na.rm=T))
la=as.data.frame(la)
## UMAP
a=umap::umap(la)
la$col=round(1+la[,'Cell: Area']-min(la[,'Cell: Area']))
## Unsupervissed clustering
cl=dbscan::dbscan(a$layout, eps = eps, minPts = minPts)
col=rainbow(max(cl$cluster)*1.2)
cl$cluster=cl$cluster+1
dev.off()
dev.off()
head(la)
# sapply(colnames(dm),  function(x) try(hist(dm[,x],xlab=x)))
## Z-score
la=apply(dm, 2, function(x) (x - mean(x,na.rm=T))/sd(x,na.rm=T))
la=as.data.frame(la)
## UMAP
a=umap::umap(la,method = 'umap-learn')
# sapply(colnames(dm),  function(x) try(hist(dm[,x],xlab=x)))
## Z-score
la=apply(dm, 2, function(x) (x - mean(x,na.rm=T))/sd(x,na.rm=T))
la=as.data.frame(la)
## UMAP
a=umap::umap(la,method = 'umap-learn')
# sapply(colnames(dm),  function(x) try(hist(dm[,x],xlab=x)))
## Z-score
la=apply(dm, 2, function(x) (x - mean(x,na.rm=T))/sd(x,na.rm=T))
la=as.data.frame(la)
## UMAP
a=umap::umap(la,method = 'umap-learn')
# sapply(colnames(dm),  function(x) try(hist(dm[,x],xlab=x)))
## Z-score
la=apply(dm, 2, function(x) (x - mean(x,na.rm=T))/sd(x,na.rm=T))
la=as.data.frame(la)
## UMAP
a=umap::umap(la,method = 'umap-learn')
dim(la)
help(umap)
umap.defaults
library(umap)
umap.defaults
head(la)
la=la[,!colnames(la) %in% c("Centroid X µm", "Centroid Y µm")]
a=umap::umap(la)
head(la)
apply(is.na(la),2,any)
la=la[,!apply(is.na(la),2,all)]
head(la)
a=umap::umap(la)
apply(is.na(la),2,any)
la=la[,apply(!is.na(la),2,all)]
apply(is.na(la),2,any)
a=umap::umap(la)
sz=sapply(X, function(loi) loi$areaOccupied_cm2/loi$correctedCount)
boxplot(sz)
loi$correctedCountid
id
sapply(X, function(loi) loi$correctedCount)
sapply(X, function(loi) loi$id)
sapply(X, function(loi) try(plot(loi$correctedCount,loi$areaOccupied_cm2/loi$correctedCount)))
par(mfrow=c(2,1))
sapply(X, function(loi) try(plot(as.Date(loi$date),loi$correctedCount)))
sz=sapply(X, function(loi) loi$areaOccupied_cm2/loi$correctedCount)
boxplot(sz)
sapply(X, function(loi) try(plot(loi$correctedCount,loi$areaOccupied_cm2/loi$correctedCount,main=loi$id[1],pch=20)))
sapply(X, function(loi) try(plot(loi$correctedCount,loi$areaOccupied_cm2/loi$correctedCount,main=loi$id[1],pch=20)))
UM2CM = 1e-4
library(cloneid)
lineageCLs<-c("NUGC-4_A4_seed","KATOIII_A6_seed","SNU-16_A15_seed", "NCI-N87_A9_seed", "HGC-27_A3_seed")
X=list()
for(lin in lineageCLs){
loi=findAllDescendandsOf(lin,recursive = F)
loi=loi[loi$event=="harvest",]
loi$areaOccupied_um2=loi$areaOccupied_cm2 /UM2CM^2
rownames(loi)=loi$id
# for(id in loi$id){
#   try(cloneid::harvest(id, loi[id,"passaged_from_id1"],cellCount = NA))
# }
X[[lin]]=loi
}
par(mfrow=c(2,1))
sapply(X, function(loi) try(plot(as.Date(loi$date),loi$correctedCount)))
sz=sapply(X, function(loi) loi$areaOccupied_um2/loi$correctedCount)
boxplot(sz)
sapply(X, function(loi) try(plot(loi$correctedCount,loi$areaOccupied_cm2/loi$correctedCount,main=loi$id[1],pch=20)))
par(mfrow=c(2,1))
sapply(X, function(loi) plot(as.Date(loi$date),loi$correctedCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$areaOccupied_um2/loi$correctedCount)
boxplot(sz)
sapply(X, function(loi) plot(loi$correctedCount,loi$areaOccupied_cm2/loi$correctedCount,main=loi$id[1],pch=20))
par(mfrow=c(2,1))
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$areaOccupied_um2/loi$cellCount)
boxplot(sz)
sapply(X, function(loi) plot(loi$cellCount,loi$areaOccupied_cm2/loi$cellCount,main=loi$id[1],pch=20))
UM2CM = 1e-4
library(cloneid)
lineageCLs<-c("NUGC-4_A4_seed","KATOIII_A6_seed","SNU-16_A15_seed", "NCI-N87_A9_seed", "HGC-27_A3_seed")
X=list()
for(lin in lineageCLs){
loi=findAllDescendandsOf(lin,recursive = F)
loi=loi[loi$event=="harvest",]
loi$areaOccupied_um2=loi$areaOccupied_cm2 /UM2CM^2
rownames(loi)=loi$id
# for(id in loi$id){
#   try(cloneid::harvest(id, loi[id,"passaged_from_id1"],cellCount = NA))
# }
if(loi$cellLine=="NCI-N87"){
loi$cellCount=loi$correctedCount
}
X[[lin]]=loi
}
par(mfrow=c(2,1))
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$areaOccupied_um2/loi$cellCount)
boxplot(sz)
sapply(X, function(loi) plot(loi$cellCount,loi$areaOccupied_cm2/loi$cellCount,main=loi$id[1],pch=20))
boxplot(sz,ylim=c(min(unlist(sz)), 400))
min(unlist(sz))
unlist(sz)
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 400))
sapply(X, function(loi) plot(loi$cellCount,loi$areaOccupied_cm2/loi$cellCount,main=loi$id[1],pch=20))
par(mfrow=c(2,2))
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$areaOccupied_um2/loi$cellCount)
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 400))
sapply(X, function(loi) plot(loi$cellCount,loi$areaOccupied_cm2/loi$cellCount,main=loi$id[1],pch=20))
UM2CM = 1e-4
library(cloneid)
lineageCLs<-c("NUGC-4_A4_seed","KATOIII_A6_seed","SNU-16_A15_seed", "NCI-N87_A9_seed"); #, "HGC-27_A3_seed")
X=list()
for(lin in lineageCLs){
loi=findAllDescendandsOf(lin,recursive = F)
loi=loi[loi$event=="harvest",]
loi$areaOccupied_um2=loi$areaOccupied_cm2 /UM2CM^2
loi$cellSize=loi$areaOccupied_um2/loi$cellCount
rownames(loi)=loi$id
# for(id in loi$id){
#   try(cloneid::harvest(id, loi[id,"passaged_from_id1"],cellCount = NA))
# }
if(loi$cellLine=="NCI-N87"){
loi$cellCount=loi$correctedCount
}
X[[lin]]=loi
}
par(mfrow=c(2,2))
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$cellSize)
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 400))
sapply(X, function(loi) plot(loi$cellCount,loi$cellSize,main=loi$id[1],pch=20))
UM2CM = 1e-4
library(cloneid)
lineageCLs<-c("NUGC-4_A4_seed","KATOIII_A6_seed","SNU-16_A15_seed", "NCI-N87_A9_seed"); #, "HGC-27_A3_seed")
X=list()
for(lin in lineageCLs){
loi=findAllDescendandsOf(lin,recursive = F)
loi=loi[loi$event=="harvest",]
loi$areaOccupied_um2=loi$areaOccupied_cm2 /UM2CM^2
rownames(loi)=loi$id
# for(id in loi$id){
#   try(cloneid::harvest(id, loi[id,"passaged_from_id1"],cellCount = NA))
# }
if(loi$cellLine[1]=="NCI-N87"){
loi$cellCount=loi$correctedCount
}
loi$cellSize=loi$areaOccupied_um2/loi$cellCount
X[[lin]]=loi
}
par(mfrow=c(2,2))
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$cellSize)
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 400))
sapply(X, function(loi) plot(loi$cellCount,loi$cellSize,main=loi$id[1],pch=20))
lin
loi=findAllDescendandsOf(lin,recursive = F)
loi=loi[loi$event=="harvest",]
rownames(loi)=loi$id
for(id in loi$id){
try(cloneid::harvest(id, loi[id,"passaged_from_id1"],cellCount = NA))
}
UM2CM = 1e-4
library(cloneid)
lineageCLs<-c("NUGC-4_A4_seed","KATOIII_A6_seed","SNU-16_A15_seed", "NCI-N87_A9_seed"); #, "HGC-27_A3_seed")
X=list()
for(lin in lineageCLs){
loi=findAllDescendandsOf(lin,recursive = F)
loi=loi[loi$event=="harvest",]
rownames(loi)=loi$id
# for(id in loi$id){
#   try(cloneid::harvest(id, loi[id,"passaged_from_id1"],cellCount = NA))
# }
if(loi$cellLine[1]=="NCI-N87"){
loi$cellCount=loi$correctedCount
}
loi$areaOccupied_um2=loi$areaOccupied_cm2 /UM2CM^2
loi$cellSize=loi$areaOccupied_um2/loi$cellCount
X[[lin]]=loi
}
par(mfrow=c(2,2))
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$cellSize)
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 400))
sapply(X, function(loi) plot(loi$cellCount,loi$cellSize,main=loi$id[1],pch=20))
UM2CM = 1e-4
library(cloneid)
lineageCLs<-c("NUGC-4_A4_seed","KATOIII_A6_seed","SNU-16_A15_seed", "NCI-N87_A9_seed"); #, "HGC-27_A3_seed")
X=list()
for(lin in lineageCLs){
loi=findAllDescendandsOf(lin,recursive = F)
loi=loi[loi$event=="harvest",]
rownames(loi)=loi$id
# for(id in loi$id){
#   try(cloneid::harvest(id, loi[id,"passaged_from_id1"],cellCount = NA))
# }
# if(loi$cellLine[1]=="NCI-N87"){
loi$cellCount=loi$correctedCount
# }
loi$areaOccupied_um2=loi$areaOccupied_cm2 /UM2CM^2
loi$cellSize=loi$areaOccupied_um2/loi$cellCount
X[[lin]]=loi
}
par(mfrow=c(2,2))
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$cellSize)
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 400))
sapply(X, function(loi) plot(loi$cellCount,loi$cellSize,main=loi$id[1],pch=20))
UM2CM = 1e-4
library(cloneid)
lineageCLs<-c("NUGC-4_A4_seed","KATOIII_A6_seed","SNU-16_A15_seed", "NCI-N87_A9_seed", "HGC-27_A3_seed")
X=list()
for(lin in lineageCLs){
loi=findAllDescendandsOf(lin,recursive = F)
loi=loi[loi$event=="harvest",]
rownames(loi)=loi$id
# for(id in loi$id){
#   try(cloneid::harvest(id, loi[id,"passaged_from_id1"],cellCount = NA))
# }
## Size vs density correlation better when using corrected count!
if(loi$cellLine[1]!="HGC-27"){
loi$cellCount=loi$correctedCount
}
loi$areaOccupied_um2=loi$areaOccupied_cm2 /UM2CM^2
loi$cellSize=loi$areaOccupied_um2/loi$cellCount
X[[lin]]=loi
}
par(mfrow=c(2,2))
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$cellSize)
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 400))
sapply(X, function(loi) plot(loi$cellCount,loi$cellSize,main=loi$id[1],pch=20))
cloneid::editCloneidConfig(host='cloneredesign.cswgogbb5ufg.us-east-1.rds.amazonaws.com',  user='4470246', password='la1vitaebella');
UM2CM = 1e-4
library(cloneid)
lineageCLs<-c("NUGC-4_A4_seed","KATOIII_A6_seed","SNU-16_A15_seed", "NCI-N87_A9_seed","HGC-27_A22_seed") #, "HGC-27_A3_seed"
X=list()
for(lin in lineageCLs){
loi=findAllDescendandsOf(lin,recursive = F)
loi=loi[loi$event=="harvest",]
rownames(loi)=loi$id
# for(id in loi$id){
#   try(cloneid::harvest(id, loi[id,"passaged_from_id1"],cellCount = NA))
# }
## Size vs density correlation better when using corrected count!
if(loi$cellLine[1]!="HGC-27"){
loi$cellCount=loi$correctedCount
}
loi$areaOccupied_um2=loi$areaOccupied_cm2 /UM2CM^2
loi$cellSize=loi$areaOccupied_um2/loi$cellCount
X[[lin]]=loi
}
par(mfrow=c(2,2))
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$cellSize)
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 400))
sapply(X, function(loi) plot(loi$cellCount,loi$cellSize,main=loi$id[1],pch=20))
cloneid::editCloneidConfig(host='cloneredesign.cswgogbb5ufg.us-east-1.rds.amazonaws.com',  user='4470246', password='la1vitaebella');
library(matlab)
library(cloneid)
UM2CM = 1e-4
lineageCLs<-c("NUGC-4_A4_seed","KATOIII_A6_seed","SNU-16_A15_seed", "NCI-N87_A9_seed","HGC-27_A22_seed"); #, "HGC-27_A3_seed")
X=list()
for(lin in fliplr(lineageCLs)[2:1]){
loi=findAllDescendandsOf(lin,recursive = F)
loi=loi[loi$event=="harvest",]
rownames(loi)=loi$id
# for(id in loi$id){
#   try(cloneid::harvest(id, loi[id,"passaged_from_id1"],cellCount = NA))
# }
## Size vs density correlation better when using corrected count!
if(loi$cellLine[1]!="HGC-27"){
loi$cellCount=loi$correctedCount
}
loi$areaOccupied_um2=loi$areaOccupied_cm2 /UM2CM^2
loi$cellSize=loi$areaOccupied_um2/loi$cellCount
X[[lin]]=loi
}
par(mfrow=c(2,2))
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$cellSize)
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 400))
sapply(X, function(loi) plot(loi$cellCount,loi$cellSize,main=loi$id[1],pch=20))
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$cellSize)
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 400))
dev.off*()
dev.off()
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$cellSize)
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 400))
cloneid::editCloneidConfig(host='cloneredesign.cswgogbb5ufg.us-east-1.rds.amazonaws.com',  user='4470246', password='la1vitaebella');
library(matlab)
library(cloneid)
UM2CM = 1e-4
lineageCLs<-c("NUGC-4_A4_seed","KATOIII_A6_seed","SNU-16_A15_seed", "NCI-N87_A9_seed","HGC-27_A22_seed"); #, "HGC-27_A3_seed")
X=list()
for(lin in fliplr(lineageCLs)){
loi=findAllDescendandsOf(lin,recursive = F)
loi=loi[loi$event=="harvest",]
rownames(loi)=loi$id
# for(id in loi$id){
#   try(cloneid::harvest(id, loi[id,"passaged_from_id1"],cellCount = NA))
# }
## Size vs density correlation better when using corrected count!
if(loi$cellLine[1]!="HGC-27"){
loi$cellCount=loi$correctedCount
}
loi$areaOccupied_um2=loi$areaOccupied_cm2 /UM2CM^2
loi$cellSize=loi$areaOccupied_um2/loi$cellCount
X[[lin]]=loi
}
par(mfrow=c(2,2))
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$cellSize)
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 800))
sapply(X, function(loi) plot(loi$cellCount,loi$cellSize,main=loi$id[1],pch=20))
dev.off()
sz=sapply(X, function(loi) loi$cellSize)
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 800))
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 800),las=2,horizontal = T)
par(mfrow=c(2,2),mai=c(1,2,1,1))
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$cellSize)
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 800),las=2,horizontal = T)
par(mfrow=c(2,2),mai=c(0.31,1.3,0.31,0.31))
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$cellSize)
boxplot(sz,ylim=c(min(unlist(sz),na.rm=T), 800),las=2,horizontal = T)
par(mfrow=c(2,2),mai=c(0.31,1.3,0.31,0.31))
sapply(X, function(loi) plot(as.Date(loi$date),loi$cellCount,main=loi$id[1],pch=20))
sz=sapply(X, function(loi) loi$cellSize)
boxplot(sz,las=2,horizontal = T); #ylim=c(min(unlist(sz),na.rm=T), 600)
rgl::open3d()
rgl::open3d()
# conda activate r_env
# setwd("/raid/crdlab/ix1/Projects/M005_MeasuringFitnessPerClone_2019/code/R")
setwd("~/Projects/PMO/MeasuringFitnessPerClone/code/3D_Imaging/R")
source("CorrectCellposeSegmentation.R")
source("assignCompartment2Nucleus.R")
source("compareCells.R")
source("Utils.R")
library(matlab)
library(geometry)
library(rgl)
knitr::knit_hooks$set(webgl = hook_webgl)
CorrectCellposeSegmentation
CorrectCellposeSegmentation
# conda activate r_env
# setwd("/raid/crdlab/ix1/Projects/M005_MeasuringFitnessPerClone_2019/code/R")
setwd("~/Projects/PMO/MeasuringFitnessPerClone/code/3D_Imaging/R")
source("CorrectCellposeSegmentation.R")
source("assignCompartment2Nucleus.R")
source("compareCells.R")
source("Utils.R")
library(matlab)
library(geometry)
library(rgl)
knitr::knit_hooks$set(webgl = hook_webgl)
CorrectCellposeSegmentation
# conda activate r_env
# setwd("/raid/crdlab/ix1/Projects/M005_MeasuringFitnessPerClone_2019/code/R")
setwd("~/Projects/PMO/MeasuringFitnessPerClone/code/3D_Imaging/R")
source("CorrectCellposeSegmentation.R")
source("assignCompartment2Nucleus.R")
source("compareCells.R")
source("Utils.R")
library(matlab)
library(geometry)
library(rgl)
knitr::knit_hooks$set(webgl = hook_webgl)
CorrectCellposeSegmentation
